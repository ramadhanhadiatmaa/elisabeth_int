name: CI
on:
  push:
    branches: ["staging"]

jobs:
  build:
    environment: staging
    runs-on: ubuntu-latest

    steps:
      - name: Create dotenv file
        run: |
          echo "BASE_URL_K=${{ secrets.BASE_URL_K }}" >> dotenv
          echo "BASE_URL_P=${{ secrets.BASE_URL_P }}" >> dotenv
          echo "BASE_URL_A=${{ secrets.BASE_URL_A }}" >> dotenv
          echo "BASE_URL_D=${{ secrets.BASE_URL_D }}" >> dotenv
          echo "BASE_URL_B=${{ secrets.BASE_URL_B }}" >> dotenv
          echo "BASE_HEAD=${{ secrets.BASE_HEAD }}" >> dotenv
          echo "BASE_KEY=${{ secrets.BASE_KEY }}" >> dotenv
          echo "Contents of dotenv file:"
          cat dotenv

      - name: Checkout
        uses: actions/checkout@v3

      - name: Connect to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build and Push
        uses: docker/build-push-action@v4
        with:
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{ vars.CONTAINER_NAME }}:v1.0
          build-args: ENV_CONTENT="$(cat dotenv)"

  deployment:
    needs: build
    environment: staging
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER }}
          username: ${{ secrets.SERVER_USERNAME}}
          password: ${{ secrets.SERVER_PASSWORD}}
          port: ${{ secrets.SERVER_PORT  }}
          script: |
            whoami
            docker stop ${{ vars.CONTAINER_NAME }} || true && docker rm ${{ vars.CONTAINER_NAME }} || true
            docker pull ${{ vars.IMAGE_NAME }}:v1.0

            docker run --restart always -d -p 8047:80 --name ${{ vars.CONTAINER_NAME }} \
            -v /var/www/elisabethapi/.env:/app/.env \
            ${{ vars.IMAGE_NAME }}:v1.0
